// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define Robotersimulation_Naosimulation_ODEGelenk_BODY

/************************************************************
 ODEGelenk class body
 ************************************************************/

// include associated header file
#include "Robotersimulation/Naosimulation/ODEGelenk.h"

// Derived includes directives

namespace Robotersimulation {
namespace Naosimulation {

// static attributes (if any)

/**
 * 
 * @param x 
 * @param y 
 * @param z 
 */
void ODEGelenk::setAchse(double /*in*/x, double /*in*/y, double /*in*/z) {
	dJointSetHingeAxis(joint, x, y, z);
}

/**
 * 
 * @param x 
 * @param y 
 * @param z 
 */
void ODEGelenk::setAnker(double /*in*/x, double /*in*/y, double /*in*/z) {
	dJointSetHingeAnchor(joint, x, y, z);
}

/**
 * 
 */
void ODEGelenk::update() {
	double tmp = dJointGetHingeAngle(joint);  // aktueller Winkel
	double z = theta - tmp;
	dJointSetHingeParam(joint, dParamVel, anstieg * z);
	dJointSetHingeParam(joint, dParamFMax, fMax);
}

/**
 * 
 * @param koerper1 
 * @param koerper2 
 * @param welt 
 */
void ODEGelenk::erzeugeGelenk(Koerperteil * /*in*/koerper1,
		Koerperteil * /*in*/koerper2, Welt * /*in*/welt) {

	dWorldID welt_id;
	welt_id = (dWorldID) welt->getID();
	joint = dJointCreateHinge(welt_id, 0);
	dJointAttach(joint, (dBodyID) koerper1->getBody(), (dBodyID) koerper2->getBody());
}

} // of namespace Naosimulation
} // of namespace Robotersimulation

/************************************************************
 End of ODEGelenk class body
 ************************************************************/
