// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define Robotersimulation_Naosimulation_Roboter_BODY

/************************************************************
 Roboter class body
 ************************************************************/

// include associated header file
#include "Robotersimulation/Naosimulation/Roboter.h"

// Derived includes directives

namespace Robotersimulation {
namespace Naosimulation {

// static attributes (if any)

/**
 * 
 */
void Roboter::erzeugeRoboter(Welt * welt) {
	//Linke Koerperhaelfte
	koerperteil[0] = fussfabrik.erzeugeKoerperteil(welt, 'l');

	koerperteil[1] = knoechelfabrik.erzeugeKoerperteil(welt, 'l');

	koerperteil[2] = schienbeinfabrik.erzeugeKoerperteil(welt, 'l');

	koerperteil[3] = oberschenkelfabrik.erzeugeKoerperteil(welt, 'l');

	gelenk[0] = anklerollfabrik.erzeugeGelenk(koerperteil[0], koerperteil[1], welt, 'l');

	gelenk[1] = anklepitchfabrik.erzeugeGelenk(koerperteil[1], koerperteil[2], welt, 'l');

	gelenk[2] = kneepitchfabrik.erzeugeGelenk(koerperteil[2], koerperteil[3], welt, 'l');

	//Rechte Koerperhaelfte
	koerperteil[4] = fussfabrik.erzeugeKoerperteil(welt, 'r');

	koerperteil[5] = knoechelfabrik.erzeugeKoerperteil(welt, 'r');

	koerperteil[6] = schienbeinfabrik.erzeugeKoerperteil(welt, 'r');

	koerperteil[7] = oberschenkelfabrik.erzeugeKoerperteil(welt, 'r');

	gelenk[3] = anklerollfabrik.erzeugeGelenk(koerperteil[4], koerperteil[5], welt, 'r');

	gelenk[4] = anklepitchfabrik.erzeugeGelenk(koerperteil[5], koerperteil[6], welt, 'r');

	gelenk[5] = kneepitchfabrik.erzeugeGelenk(koerperteil[6], koerperteil[7], welt, 'r');
}

/**
 * @param name
 * @param grad
 */
void Roboter::setAngles(std::string name, double grad) {
	if (name == "LAnkleRoll") gelenk[0]->setWinkelUm(grad);
	if (name == "LAnklePitch") gelenk[1]->setWinkelUm(grad);
	if (name == "LKneePitch") gelenk[2]->setWinkelUm(grad);
	if (name == "RAnkleRoll") gelenk[3]->setWinkelUm(grad);
	if (name == "RAnklePitch") gelenk[4]->setWinkelUm(grad);
	if (name == "RKneePitch") gelenk[5]->setWinkelUm(grad);
}

/**
 * @param name
 */
double Roboter::getAngles(std::string name) {
	if (name == "LAnkleRoll") return gelenk[0]->getWinkel();
	if (name == "LAnklePitch") return gelenk[1]->getWinkel();
	if (name == "LKneePitch") return gelenk[2]->getWinkel();
	if (name == "RAnkleRoll") return gelenk[3]->getWinkel();
	if (name == "RAnklePitch") return gelenk[4]->getWinkel();
	if (name == "RKneePitch") return gelenk[5]->getWinkel();

	return 0;
}

/**
 * 
 */
void Roboter::zeichne() {
	//Linke Koerperhaelfte
	koerperteil[0]->zeichne();
	koerperteil[1]->zeichne();
	koerperteil[2]->zeichne();
	koerperteil[3]->zeichne();

	//Rechte Koerperhaelfte
	koerperteil[4]->zeichne();
	koerperteil[5]->zeichne();
	koerperteil[6]->zeichne();
	koerperteil[7]->zeichne();
}

/**
 * 
 */
void Roboter::update() {
	//Linke Koerperhaelfte
	gelenk[0]->update();
	gelenk[1]->update();
	gelenk[2]->update();

	//Rechte Koerperhaelfte
	gelenk[3]->update();
	gelenk[4]->update();
	gelenk[5]->update();
}
} // of namespace Naosimulation
} // of namespace Robotersimulation

/************************************************************
 End of Roboter class body
 ************************************************************/
